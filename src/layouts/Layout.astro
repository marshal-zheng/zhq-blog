---
import { LOCALE, SITE } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";
import { SplashCursor } from "@components/SplashCursor";
import FloatingRobot from "@components/FloatingRobot";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
  assistantMode?: 'fullscreen' | 'bubble';
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
  assistantMode = 'bubble',
} = Astro.props;

const currentPath = Astro.url.pathname;
const isPostDetail = /^\/posts\/[^/]+\/?$/.test(currentPath);

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin
).href;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  image: `${socialImageURL}`,
  datePublished: `${pubDatetime?.toISOString()}`,
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [
    {
      "@type": "Person",
      name: `${author}`,
      url: `${profile}`,
    },
  ],
};
---

<!doctype html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
  data-theme="dark"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- WeChat -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />
    <meta property="og:type" content="article" />
    <meta property="og:site_name" content={SITE.title} />
    <meta property="og:locale" content={LOCALE.lang ?? "en"} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />

    <link rel="stylesheet" href="/css/fonts.css" />

    <meta name="theme-color" content="" />

    <ViewTransitions />

    <script is:inline src="/toggle-theme.js" async></script>
    <link rel="stylesheet" href="/css/katex.min.css" />
    
    <script is:inline>
      // 保存是否为移动设备的标志到window对象
      window.isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    </script>
  </head>
  <body class="relative">
    {!isPostDetail && <SplashCursor client:load />}
    <FloatingRobot client:load mode={assistantMode} />
    <slot />

    <!-- 客户端脚本：初始化 API 适配器 -->
    <script>
      import { setupApiAdapter } from '@/services/api-adapter.service';
      
      // 防止重复初始化
      if (!window.__apiAdapterInitialized) {
        try {
          // 初始化 API 适配器
          setupApiAdapter();
          window.__apiAdapterInitialized = true;
          console.log('✅ API适配器已初始化');
        } catch (error) {
          console.error('❌ API适配器初始化失败:', error);
        }
      } else {
        console.log('⚠️  API适配器已存在，跳过重复初始化');
      }
    </script>

    <!-- 微信二维码加载监控脚本 -->
    <script>
      // 监控微信二维码图片的加载情况
      document.addEventListener('DOMContentLoaded', () => {
        // 由于现在使用懒加载，图片初始时没有src属性，需要监控data-src
        const wechatImg = document.querySelector('img[data-src="/assets/wechat-qrcode.jpg"]');
        if (wechatImg) {
          console.log('🔍 发现微信二维码图片元素（懒加载模式）');
          
          // 创建MutationObserver来监控src属性的变化
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
                const img = mutation.target as HTMLImageElement;
                if (img.src.includes('wechat-qrcode.jpg')) {
                  console.log('🖼️ 微信二维码图片开始懒加载');
                  
                  img.addEventListener('load', () => {
                    console.log('✅ 微信二维码图片懒加载完成');
                  }, { once: true });
                  
                  img.addEventListener('error', () => {
                    console.error('❌ 微信二维码图片加载失败');
                  }, { once: true });
                }
              }
            });
          });
          
          observer.observe(wechatImg, { attributes: true, attributeFilter: ['src'] });
        } else {
          console.log('🔍 未找到微信二维码图片元素');
        }
        
        // 监控所有图片请求
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
          const url = args[0];
          if (typeof url === 'string' && url.includes('wechat-qrcode.jpg')) {
            console.log('🔍 检测到微信二维码图片请求:', url);
          }
          return originalFetch.apply(this, args);
        };
        
        // 监控所有网络请求
        if (window.performance && window.performance.getEntriesByType) {
          const checkImageRequests = () => {
            const entries = window.performance.getEntriesByType('resource');
            const wechatRequests = entries.filter(entry => 
              entry.name.includes('wechat-qrcode.jpg')
            );
            
            if (wechatRequests.length > 1) {
              console.warn('⚠️ 检测到微信二维码图片重复请求:', wechatRequests.length, '次');
              wechatRequests.forEach((request, index) => {
                console.log(`请求 ${index + 1}:`, {
                  时间: new Date(request.startTime).toLocaleTimeString(),
                  耗时: `${(request.responseEnd - request.startTime).toFixed(2)}ms`,
                  URL: request.name
                });
              });
            } else if (wechatRequests.length === 1) {
              console.log('✅ 微信二维码图片只请求了一次');
            }
          };
          
          // 延迟检查，给页面足够的时间加载
          setTimeout(checkImageRequests, 3000);
          
          // 在页面卸载前检查
          window.addEventListener('beforeunload', checkImageRequests);
        }
      });
    </script>
  </body>
</html>
